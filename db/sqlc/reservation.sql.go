// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservation.sql

package db

import (
	"context"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO "reservation" (
    "user_id",
    "ticket_id",
    "payment_id"
) VALUES (
    $1, $2, $3
) RETURNING 
    id, 
    user_id, 
    ticket_id, 
    payment_id, 
    status, 
    EXTRACT(EPOCH FROM duration_time)::bigint as duration_time_seconds,
    created_at
`

type CreateReservationParams struct {
	UserID    int64 `json:"user_id"`
	TicketID  int64 `json:"ticket_id"`
	PaymentID int64 `json:"payment_id"`
}

type CreateReservationRow struct {
	ID                  int64        `json:"id"`
	UserID              int64        `json:"user_id"`
	TicketID            int64        `json:"ticket_id"`
	PaymentID           int64        `json:"payment_id"`
	Status              TicketStatus `json:"status"`
	DurationTimeSeconds int64        `json:"duration_time_seconds"`
	CreatedAt           time.Time    `json:"created_at"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (CreateReservationRow, error) {
	row := q.db.QueryRowContext(ctx, createReservation, arg.UserID, arg.TicketID, arg.PaymentID)
	var i CreateReservationRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.PaymentID,
		&i.Status,
		&i.DurationTimeSeconds,
		&i.CreatedAt,
	)
	return i, err
}

const getReservationStatus = `-- name: GetReservationStatus :one
SELECT status FROM "reservation" 
WHERE id = $1
`

func (q *Queries) GetReservationStatus(ctx context.Context, id int64) (TicketStatus, error) {
	row := q.db.QueryRowContext(ctx, getReservationStatus, id)
	var status TicketStatus
	err := row.Scan(&status)
	return status, err
}

const updateReservation = `-- name: UpdateReservation :one
UPDATE "reservation"
SET 
    "status" = $1
WHERE id = $2
RETURNING id, user_id, ticket_id, payment_id, status, duration_time, created_at
`

type UpdateReservationParams struct {
	Status TicketStatus `json:"status"`
	ID     int64        `json:"id"`
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, updateReservation, arg.Status, arg.ID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.PaymentID,
		&i.Status,
		&i.DurationTime,
		&i.CreatedAt,
	)
	return i, err
}
