// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profile.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addToUserWallet = `-- name: AddToUserWallet :exec
UPDATE "profile"
SET wallet = wallet + $1
WHERE user_id = $2
`

type AddToUserWalletParams struct {
	Wallet int64 `json:"wallet"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) AddToUserWallet(ctx context.Context, arg AddToUserWalletParams) error {
	_, err := q.db.ExecContext(ctx, addToUserWallet, arg.Wallet, arg.UserID)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT 
  u.id AS user_id,
  u.email,
  u.phone_number,
  u.role,
  u.status,
  u.phone_verified,
  u.email_verified,
  u.created_at,
  p.pic_dir,
  p.first_name,
  p.last_name,
  p.city_id,
  p.national_code, 
  p.wallet
FROM "user" u
JOIN "profile" p ON u.id = p.user_id
WHERE u.id = $1
`

type GetUserProfileRow struct {
	UserID        int64      `json:"user_id"`
	Email         string     `json:"email"`
	PhoneNumber   string     `json:"phone_number"`
	Role          Role       `json:"role"`
	Status        UserStatus `json:"status"`
	PhoneVerified bool       `json:"phone_verified"`
	EmailVerified bool       `json:"email_verified"`
	CreatedAt     time.Time  `json:"created_at"`
	PicDir        string     `json:"pic_dir"`
	FirstName     string     `json:"first_name"`
	LastName      string     `json:"last_name"`
	CityID        int64      `json:"city_id"`
	NationalCode  string     `json:"national_code"`
	Wallet        int64      `json:"wallet"`
}

func (q *Queries) GetUserProfile(ctx context.Context, id int64) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, id)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.PhoneVerified,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.PicDir,
		&i.FirstName,
		&i.LastName,
		&i.CityID,
		&i.NationalCode,
		&i.Wallet,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE "profile"
SET 
    "pic_dir" = COALESCE($2, "pic_dir"),
    "first_name" = COALESCE($3, "first_name"),
    "last_name" = COALESCE($4, "last_name"),
    "city_id" = COALESCE($5, "city_id"),
    "national_code" = COALESCE($6, "national_code")
WHERE "user_id" = $1
RETURNING user_id, pic_dir, first_name, last_name, city_id, wallet, national_code
`

type UpdateProfileParams struct {
	UserID       int64          `json:"user_id"`
	PicDir       sql.NullString `json:"pic_dir"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	CityID       sql.NullInt64  `json:"city_id"`
	NationalCode sql.NullString `json:"national_code"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.UserID,
		arg.PicDir,
		arg.FirstName,
		arg.LastName,
		arg.CityID,
		arg.NationalCode,
	)
	var i Profile
	err := row.Scan(
		&i.UserID,
		&i.PicDir,
		&i.FirstName,
		&i.LastName,
		&i.CityID,
		&i.Wallet,
		&i.NationalCode,
	)
	return i, err
}
