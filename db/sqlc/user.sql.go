// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  "email",
  "phone_number",
  "hashed_password",
  "email_verified",
  "phone_verified"
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, email, phone_number, hashed_password, password_change_at, role, status, phone_verified, email_verified, created_at
`

type CreateUserParams struct {
	Email          sql.NullString `json:"email"`
	PhoneNumber    sql.NullString `json:"phone_number"`
	HashedPassword sql.NullString `json:"hashed_password"`
	EmailVerified  bool           `json:"email_verified"`
	PhoneVerified  bool           `json:"phone_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
		arg.EmailVerified,
		arg.PhoneVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.HashedPassword,
		&i.PasswordChangeAt,
		&i.Role,
		&i.Status,
		&i.PhoneVerified,
		&i.EmailVerified,
		&i.CreatedAt,
	)
	return i, err
}
