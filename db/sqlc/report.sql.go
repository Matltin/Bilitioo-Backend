// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: report.sql

package db

import (
	"context"
)

const answerReport = `-- name: AnswerReport :one
UPDATE "report"
SET 
    response_text = $1,
    admin_id = $2
WHERE id = $3
RETURNING id, reservation_id, user_id, admin_id, request_type, request_text, response_text
`

type AnswerReportParams struct {
	ResponseText string `json:"response_text"`
	AdminID      int64  `json:"admin_id"`
	ID           int64  `json:"id"`
}

func (q *Queries) AnswerReport(ctx context.Context, arg AnswerReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, answerReport, arg.ResponseText, arg.AdminID, arg.ID)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.UserID,
		&i.AdminID,
		&i.RequestType,
		&i.RequestText,
		&i.ResponseText,
	)
	return i, err
}

const createReport = `-- name: CreateReport :one
INSERT INTO "report" (
    "reservation_id",
    "user_id",
    "request_type",
    "request_text",
    "response_text"
)
VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, reservation_id, user_id, admin_id, request_type, request_text, response_text
`

type CreateReportParams struct {
	ReservationID int64       `json:"reservation_id"`
	UserID        int64       `json:"user_id"`
	RequestType   RequestType `json:"request_type"`
	RequestText   string      `json:"request_text"`
	ResponseText  string      `json:"response_text"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.ReservationID,
		arg.UserID,
		arg.RequestType,
		arg.RequestText,
		arg.ResponseText,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.UserID,
		&i.AdminID,
		&i.RequestType,
		&i.RequestText,
		&i.ResponseText,
	)
	return i, err
}

const getReports = `-- name: GetReports :many
SELECT id, reservation_id, user_id, admin_id, request_type, request_text, response_text FROM "report"
`

func (q *Queries) GetReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, getReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Report{}
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.ReservationID,
			&i.UserID,
			&i.AdminID,
			&i.RequestType,
			&i.RequestText,
			&i.ResponseText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
