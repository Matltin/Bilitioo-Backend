// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_activity.sql

package db

import (
	"context"
	"time"
)

const createUserActivity = `-- name: CreateUserActivity :one
INSERT INTO "user_activity" (
    "user_id",
    "route_id",
    "vehicle_type"
) VALUES (
    $1, $2, $3
) RETURNING 
    id, 
    user_id, 
    route_id, 
    vehicle_type, 
    status, 
    EXTRACT(EPOCH FROM duration_time)::bigint as duration_time_seconds,
    created_at
`

type CreateUserActivityParams struct {
	UserID      int64       `json:"user_id"`
	RouteID     int64       `json:"route_id"`
	VehicleType VehicleType `json:"vehicle_type"`
}

type CreateUserActivityRow struct {
	ID                  int64          `json:"id"`
	UserID              int64          `json:"user_id"`
	RouteID             int64          `json:"route_id"`
	VehicleType         VehicleType    `json:"vehicle_type"`
	Status              ActivityStatus `json:"status"`
	DurationTimeSeconds int64          `json:"duration_time_seconds"`
	CreatedAt           time.Time      `json:"created_at"`
}

func (q *Queries) CreateUserActivity(ctx context.Context, arg CreateUserActivityParams) (CreateUserActivityRow, error) {
	row := q.db.QueryRowContext(ctx, createUserActivity, arg.UserID, arg.RouteID, arg.VehicleType)
	var i CreateUserActivityRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RouteID,
		&i.VehicleType,
		&i.Status,
		&i.DurationTimeSeconds,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserActivity = `-- name: UpdateUserActivity :one
UPDATE "user_activity"
SET 
    "status" = $1
WHERE id = $2
RETURNING 
    id, 
    user_id, 
    route_id, 
    vehicle_type, 
    status, 
    EXTRACT(EPOCH FROM duration_time)::bigint as duration_time_seconds,
    created_at
`

type UpdateUserActivityParams struct {
	Status ActivityStatus `json:"status"`
	ID     int64          `json:"id"`
}

type UpdateUserActivityRow struct {
	ID                  int64          `json:"id"`
	UserID              int64          `json:"user_id"`
	RouteID             int64          `json:"route_id"`
	VehicleType         VehicleType    `json:"vehicle_type"`
	Status              ActivityStatus `json:"status"`
	DurationTimeSeconds int64          `json:"duration_time_seconds"`
	CreatedAt           time.Time      `json:"created_at"`
}

func (q *Queries) UpdateUserActivity(ctx context.Context, arg UpdateUserActivityParams) (UpdateUserActivityRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserActivity, arg.Status, arg.ID)
	var i UpdateUserActivityRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RouteID,
		&i.VehicleType,
		&i.Status,
		&i.DurationTimeSeconds,
		&i.CreatedAt,
	)
	return i, err
}
